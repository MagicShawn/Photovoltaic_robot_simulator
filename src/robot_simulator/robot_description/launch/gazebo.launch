<launch>
  <param name="robot_description" command="$(find xacro)/xacro $(find robot_description)/urdf/robot_mecanum.xacro"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
  <!-- <arg name="world_name" value="$(find robot_description)/world/example.world"/> -->
  <arg name="world_name" value="$(find robot_description)/world/test.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model robot -x -4.0 -y -2.0 -z 0 -R 0 -P 0 -Y 0 "/>
  <!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/> -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <!-- <arg name="rvizconfig" default="$(find robot_description)/launch/urdf.rviz"/> -->
  
  
  <!-- 加载控制器配置 -->
  <rosparam file="$(find robot_description)/config/controller.yaml" command="load"/>
  <!-- <rosparam file="$(find robot_description)/config/diff_controller.yaml" command="load"/> -->

  <!-- 启动控制器 -->
  <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner" 
        args="back_right_velocity_controller 
              back_left_velocity_controller 
              front_left_velocity_controller 
              front_right_velocity_controller 
              joint_state_controller"/> -->

  <!-- 状态发布 -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" 
        type="robot_state_publisher" output="screen"/>
  <param name="publish_frequency" type="double" value="30.0" />
  
  <!-- <arg name="rviz" default="true"/>-->
  <!-- <node name="rviz" pkg="rviz" type="rviz" required="true"/> -->

    <!-- run pointcloud_to_laserscan node -->
    <!-- <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" required="true">

        <remap from="cloud_in" to="/velodyne_points" />
        
        <rosparam>
            # target_frame: base_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -1.5
            max_height: -0.2

            angle_min: -3.1415926 # -M_PI
            angle_max: 3.1415926 # M_PI
            angle_increment: 0.001 # 0.17degree
            scan_time: 0.1
            range_min: 0.3   
            range_max: 100
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2 : inf : Parallelism level
            concurrency_level: 0
        </rosparam>
    </node> -->
</launch>
